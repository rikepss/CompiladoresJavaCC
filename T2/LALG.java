/* Generated By:JavaCC: Do not edit this line. LALG.java */
import java.io.*;
import java.util.*;

public class LALG implements LALGConstants {
        //Lista com os Tokens a serem buscados
public List<String> nextTokenErr = new ArrayList<String>();
        //Lista com os valores dos Tokens(Indice = valor)
public List<String> tokensList =Arrays.asList("<EOF>", " ", "\u005cn", "\u005cr", "<token of kind 4>", "(", ")", ",", ".", "program", "var", "const", "real", "integer", "procedure", "begin", "end", "<DIGIT>", "<NUM_INT>", "<NUM_REAL>", ":", ";", "read", "write", "do", "if", "then", "else", "while", "for", "to", "<ID>", "+", "-", "*", "/", ":=", "=", ">=", "<=", "<>", ">", "<", "lambda");
        //Lista de Tokens esperados
public List<String> expectedToken = new ArrayList<String>();
        //Numero de Erros do programa
public static int Erros;

  public static void main(String args []) throws ParseException
  {

        LALG parser = new LALG(System.in);
        Erros = 0;
        try
        {
           //parser.analisador_lexico();
                System.out.println("\u005cnAnalise Sintatica: Iniciando\u005cn");
           parser.analisador_sintatico();
           System.out.println("\u005cnAnalise Sintatica: Completada com <"+Erros+"> Erros!");
    }
     catch (ParseException e)
     {
        System.out.println(e.getMessage());

                return;
      }
      catch (TokenMgrError e)
      {
        System.out.println(e.getMessage());
                return;
          }

  }

  public void errorRecovery() throws ParseException
  {

        Token token = getToken(1);
        System.out.println("Erro! @(" + token.beginLine + "," + token.beginColumn + ")" +"\u005cnEncontrado: " + token.image);
        System.out.println("\u005ctEsperado: "+expectedToken.get(0));
        //System.out.println("\tBuscar: "+nextTokenErr);

                        ArrayList<Integer> kinds = new ArrayList<Integer>(); //Lista com os tipos dos Tokens a serem buscados

                        for(int j = 0; j< nextTokenErr.size(); j++)//Compara as imagens dos Tokens buscados com o vetor de Tokens do parser
                        {
                                for(int i = 0; i< tokensList.size(); i++)
                                                {
                                                        int index;
                                                        if((nextTokenErr.get(j)).equals(tokensList.get(i)))
                                                        {
                                                                kinds.add(i);
                                                                break;
                                                        }
                                                }
                         }

                        int i = 1;
                        token = getToken(i);

                        //System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" +"\n\tEncontrado:\n\t\t" + token.image);

                        //Busca os algum dos Tokens listados em kinds(Lista de valores dos Tokens Buscados)
                        // e salva quantos Tokens serao consumidos, pois se acontecer nao tratavel na producao atual, talvez ele possa ser tratado na anterior e assim em diante.
                        while(!kinds.contains(token.kind))
                        {
                                if(token.kind == 0) //Verifica se Ã© <EOF> para lancar a excecao para a producao anterior. So entra nesta condicao se <EOF> nao eh um Token buscado para recuperacao!
                                {
                                        //System.out.println("Erro! @(" + token.beginLine + "," + token.beginColumn + ")" +" - Esperado :\n\t\t"+Arrays.toString(nextTokenErr.toArray())+"\n\tEncontrado:\n\t\t" + token.image);

                                        //Limpa as listas de Buscados e Esperados
                                        while(nextTokenErr.size() != 0)
                                        {
                                                nextTokenErr.remove(0);
                                        }
                                        while(expectedToken.size() != 0)
                                        {
                                                expectedToken.remove(0);
                                        }
                                        //Lanca o erro para a producao anterior tratar
                                        throw new ParseException();
                                }

                                i++;
                                token = getToken(i);
                                //System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" +"\n\tEncontrado:\n\t\t" + token.image);
                        }
                        //System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" +"\n\tEncontrado:\n\t\t" + token.image);

                        Erros++;

                        //Limpa as listas de Buscados e Esperados
                        while(nextTokenErr.size() != 0)
                        {
                                nextTokenErr.remove(0);
                        }
                        while(expectedToken.size() != 0)
                        {
                                expectedToken.remove(0);
                        }

                        //Consome todos os Tokens que devem ser descartados
                        for(int j = 0; j<i-1; j++)
                        {
                                getNextToken();
                        }
                        //System.out.println("Erro recuperado, continuando...\n");
  }

  final public void analisador_lexico() throws ParseException {
                          Token token;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case RPAREN:
      case COMMA:
      case DOT:
      case PROGRAM:
      case VAR:
      case CONST:
      case REAL:
      case INTEGER:
      case PROCEDURE:
      case BEGIN:
      case END:
      case NUM_INT:
      case NUM_REAL:
      case COLON:
      case SEMICOLON:
      case READ:
      case WRITE:
      case DO:
      case IF:
      case THEN:
      case ELSE:
      case WHILE:
      case FOR:
      case TO:
      case ID:
      case PLUS:
      case MINUS:
      case MUL:
      case DIV:
      case ASSIGN:
      case EQUALS:
      case GREATEREQUAL:
      case LESSEREQUAL:
      case NOTEQUAL:
      case GREATER:
      case LESSER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        token = jj_consume_token(LPAREN);
                                  System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case RPAREN:
        token = jj_consume_token(RPAREN);
                                  System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case COMMA:
        token = jj_consume_token(COMMA);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case DOT:
        token = jj_consume_token(DOT);
                               System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case PROGRAM:
        token = jj_consume_token(PROGRAM);
                                   System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case VAR:
        token = jj_consume_token(VAR);
                               System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case CONST:
        token = jj_consume_token(CONST);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case REAL:
        token = jj_consume_token(REAL);
                                System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case INTEGER:
        token = jj_consume_token(INTEGER);
                                   System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case PROCEDURE:
        token = jj_consume_token(PROCEDURE);
                                     System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case BEGIN:
        token = jj_consume_token(BEGIN);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case END:
        token = jj_consume_token(END);
                               System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case ID:
        token = jj_consume_token(ID);
                              System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case NUM_INT:
        token = jj_consume_token(NUM_INT);
                                   System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case NUM_REAL:
        token = jj_consume_token(NUM_REAL);
                                    System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case COLON:
        token = jj_consume_token(COLON);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case SEMICOLON:
        token = jj_consume_token(SEMICOLON);
                                     System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case READ:
        token = jj_consume_token(READ);
                                System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case WRITE:
        token = jj_consume_token(WRITE);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case DO:
        token = jj_consume_token(DO);
                              System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case IF:
        token = jj_consume_token(IF);
                              System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case THEN:
        token = jj_consume_token(THEN);
                                System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case ELSE:
        token = jj_consume_token(ELSE);
                                System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case WHILE:
        token = jj_consume_token(WHILE);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case FOR:
        token = jj_consume_token(FOR);
                               System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case TO:
        token = jj_consume_token(TO);
                              System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case PLUS:
        token = jj_consume_token(PLUS);
                                System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case MINUS:
        token = jj_consume_token(MINUS);
                                 System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case MUL:
        token = jj_consume_token(MUL);
                               System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case DIV:
        token = jj_consume_token(DIV);
                               System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case ASSIGN:
        token = jj_consume_token(ASSIGN);
                                  System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case EQUALS:
        token = jj_consume_token(EQUALS);
                                  System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case GREATEREQUAL:
        token = jj_consume_token(GREATEREQUAL);
                                        System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case LESSEREQUAL:
        token = jj_consume_token(LESSEREQUAL);
                                       System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case NOTEQUAL:
        token = jj_consume_token(NOTEQUAL);
                                    System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case GREATER:
        token = jj_consume_token(GREATER);
                                   System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      case LESSER:
        token = jj_consume_token(LESSER);
                                  System.out.println("@(" + token.beginLine + "," + token.beginColumn + ")" + "  " + tokenImage[token.kind] + " - " + token.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void analisador_sintatico() throws ParseException {
 Token token;
    programa();
  }

  final public void programa() throws ParseException {
    try {
      jj_consume_token(PROGRAM);
      jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
                        //System.out.println("\nErro Programa");
                        nextTokenErr.add("const");//Sincronizacao
                        nextTokenErr.add("var");
                        nextTokenErr.add("procedure");
                        expectedToken.add("program, <ID> ou ;");
                        errorRecovery();
    }
    try {
      corpo();
      jj_consume_token(DOT);
      jj_consume_token(0);
    } catch (ParseException e) {
                //System.out.println("\nErro Programa");
                nextTokenErr.add("<EOF>");//Follow
                expectedToken.add(". ou <EOF>");
                errorRecovery();
    }
  }

  final public void corpo() throws ParseException {
    try {
      dc();
      jj_consume_token(BEGIN);
    } catch (ParseException e) {
                        //System.out.println("\nErro Corpo");
                        nextTokenErr.add("read");//Sincronizacao
                        nextTokenErr.add("write");
                        nextTokenErr.add("while");
                        nextTokenErr.add("if");
                        nextTokenErr.add("<ID>");
                        nextTokenErr.add("for");
                        expectedToken.add("begin, const, var ou procedure");
                        errorRecovery();
    }
    try {
      comandos();
      jj_consume_token(END);
    } catch (ParseException e) {
                //System.out.println("\nErro Corpo");
                nextTokenErr.add(".");//Follow
                expectedToken.add("END");
                errorRecovery();
    }
  }

  final public void dc() throws ParseException {
    try {
      dc_c();
      dc_v();
      dc_p();
    } catch (ParseException e) {
                        //System.out.println("\nErro DC");
                        nextTokenErr.add("begin");//Follow
                        nextTokenErr.add(".");
                        expectedToken.add("begin");
                        errorRecovery();
    }
  }

  final public void dc_c() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      try {
        jj_consume_token(CONST);
        jj_consume_token(ID);
        jj_consume_token(EQUALS);
        numero();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                        //System.out.println("\nErro Programa");
                        nextTokenErr.add("const");//Follow
                        nextTokenErr.add("var");
                        nextTokenErr.add("procedure");
                        nextTokenErr.add("begin");//Sincronizacao
                        expectedToken.add("=, ;");
                        errorRecovery();
      }
      dc_c();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void dc_v() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      try {
        jj_consume_token(VAR);
        variaveis();
        jj_consume_token(COLON);
        tipo_var();
        jj_consume_token(SEMICOLON);
        dc_v();
      } catch (ParseException e) {
                        //System.out.println("\nErro DC_V"); 
                        nextTokenErr.add("procedure");
                        nextTokenErr.add("begin");
                        expectedToken.add(";, <ID>, integer, real ou ,");
                        errorRecovery();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void tipo_var() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
        jj_consume_token(REAL);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Tipo_Var"); 
                nextTokenErr.add(";");//Follow
                nextTokenErr.add(")");
                nextTokenErr.add("procedure");
                nextTokenErr.add("begin");
                expectedToken.add("integer ou real");
                errorRecovery();
    }
  }

  final public void variaveis() throws ParseException {
    try {
      jj_consume_token(ID);
      mais_var();
    } catch (ParseException e) {
                //System.out.println("\nErro Variaveis"); 
                nextTokenErr.add(":");//Follow
                nextTokenErr.add(")");
                nextTokenErr.add("procedure");
                nextTokenErr.add("begin");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                expectedToken.add("<ID>");
                errorRecovery();
    }
  }

  final public void mais_var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      try {
        jj_consume_token(COMMA);
        variaveis();
      } catch (ParseException e) {
                        //System.out.println("\nErro Mais_Var"); 
                        nextTokenErr.add(":");//Follow
                        nextTokenErr.add(")");
                        expectedToken.add(",");
                        errorRecovery();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void dc_p() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      try {
        jj_consume_token(PROCEDURE);
        jj_consume_token(ID);
      } catch (ParseException e) {
                        //System.out.println("\nErro DC_P"); 
                        nextTokenErr.add(")");//Follow
                        expectedToken.add("procedure, <ID> ou ;");
                        errorRecovery();
      }
      try {
        parametros();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                        //System.out.println("\nErro DC_P"); 
                        nextTokenErr.add("begin");//Follow
                        expectedToken.add(";");
                        errorRecovery();
      }
      corpo_p();
      dc_p();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void parametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      try {
        jj_consume_token(LPAREN);
        lista_par();
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
                        //System.out.println("\nErro Parametros"); 
                        nextTokenErr.add(";");//Follow
                        nextTokenErr.add("begin");
                        expectedToken.add("( ou )");
                        errorRecovery();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void lista_par() throws ParseException {
    try {
      variaveis();
      jj_consume_token(COLON);
      tipo_var();
      mais_par();
    } catch (ParseException e) {
                //System.out.println("\nErro Lista_Par"); 
                nextTokenErr.add(")");//Follow
                expectedToken.add(")");
                errorRecovery();
    }
  }

  final public void mais_par() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      try {
        jj_consume_token(SEMICOLON);
        lista_par();
      } catch (ParseException e) {
                        //System.out.println("\nErro Mais_Par"); 
                        nextTokenErr.add(")");//Follow
                        expectedToken.add(")");
                        errorRecovery();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void corpo_p() throws ParseException {
    try {
      dc_loc();
      jj_consume_token(BEGIN);
    } catch (ParseException e) {
                        //System.out.println("\nErro Corpo");
                        nextTokenErr.add("read");//Sincronizacao
                        nextTokenErr.add("write");
                        nextTokenErr.add("while");
                        nextTokenErr.add("if");
                        nextTokenErr.add("<ID>");
                        nextTokenErr.add("for");
                        expectedToken.add("begin, const, var ou procedure");
                        errorRecovery();
    }
    try {
      comandos();
      jj_consume_token(END);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
                //System.out.println("\nErro Corpo_P"); 
                nextTokenErr.add("procedure");//Follow
                nextTokenErr.add("begin");
                expectedToken.add("END ou ;");
                errorRecovery();
    }
  }

  final public void dc_loc() throws ParseException {
    try {
      dc_v();
    } catch (ParseException e) {
                //System.out.println("\nErro DC_Loc"); 
                nextTokenErr.add("begin");//Follow
                expectedToken.add("var, procedure ou const");
                errorRecovery();
    }
  }

  final public void lista_arg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      try {
        jj_consume_token(LPAREN);
        argumentos();
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
                        //System.out.println("\nErro Lista_Arg"); 
                        nextTokenErr.add(";");//Follow
                        nextTokenErr.add("else");
                        expectedToken.add("( ou )");
                        errorRecovery();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void argumentos() throws ParseException {
    try {
      jj_consume_token(ID);
      mais_ident();
    } catch (ParseException e) {
                //System.out.println("\nErro Argumentos"); 
                nextTokenErr.add(")");//Follow
                nextTokenErr.add(";");
                nextTokenErr.add("else");
                expectedToken.add("<ID>");
                errorRecovery();
    }
  }

  final public void mais_ident() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      try {
        jj_consume_token(SEMICOLON);
        argumentos();
      } catch (ParseException e) {
                //System.out.println("\nErro Mais_Ident"); 
                nextTokenErr.add(")");//Follow
                expectedToken.add(";");
                errorRecovery();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void pfalsa() throws ParseException {
    try {
      if (jj_2_1(2)) {
        jj_consume_token(ELSE);
        cmd();
      } else {
        ;
      }
    } catch (ParseException e) {
                //System.out.println("\nErro PFalsa"); 
                nextTokenErr.add(";");//Follow
                nextTokenErr.add("else");
                expectedToken.add("else");
                errorRecovery();
    }
  }

  final public void comandos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case ID:
      try {
        cmd();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                        //System.out.println("\nErro Comandos"); 
                        nextTokenErr.add(";");//Sincronizacao
                        nextTokenErr.add("read");
                        nextTokenErr.add("write");
                        nextTokenErr.add("while");
                        nextTokenErr.add("if");
                        nextTokenErr.add("<ID>");
                        nextTokenErr.add("end");//Follow
                        nextTokenErr.add("else");
                        nextTokenErr.add("procedure");
                        nextTokenErr.add("begin");
                        expectedToken.add(";, else, :=, (, ), <ID>");
                        errorRecovery();
      }
      comandos();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void cmd() throws ParseException {
 Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
        jj_consume_token(READ);
        jj_consume_token(LPAREN);
        variaveis();
        jj_consume_token(RPAREN);
        break;
      case WRITE:
        jj_consume_token(WRITE);
        jj_consume_token(LPAREN);
        variaveis();
        jj_consume_token(RPAREN);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        condicao();
        jj_consume_token(RPAREN);
        jj_consume_token(DO);
        cmd();
        break;
      case IF:
        jj_consume_token(IF);
        condicao();
        jj_consume_token(THEN);
        cmd();
        pfalsa();
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        comandos();
        jj_consume_token(END);
        break;
      case ID:
        jj_consume_token(ID);
        arg_exp();
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        expressao();
        jj_consume_token(TO);
        numero();
        jj_consume_token(DO);
        jj_consume_token(BEGIN);
        comandos();
        jj_consume_token(END);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Cmd"); 
                nextTokenErr.add(";");//Follow
                nextTokenErr.add("else");
                expectedToken.add("read, write, while, if, <ID>, end, begin, :=, (, ), do, then, END ou to");
                errorRecovery();
    }
  }

  final public void arg_exp() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expressao();
        break;
      default:
        jj_la1[13] = jj_gen;
        lista_arg();
      }
    } catch (ParseException e) {
                        //System.out.println("\nErro Arg_Exp"); 
                        nextTokenErr.add(";");//Follow
                        nextTokenErr.add("else");
                        expectedToken.add(":=");
                        errorRecovery();
    }
  }

  final public void condicao() throws ParseException {
    try {
      expressao();
      relacao();
      expressao();
    } catch (ParseException e) {
                //System.out.println("\nErro Condicao");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");
                expectedToken.add("+, -, ident, numero_int, numero_real, =, <>, >=, <=, > ou <");
                errorRecovery();
    }
  }

  final public void relacao() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case GREATEREQUAL:
        jj_consume_token(GREATEREQUAL);
        break;
      case LESSEREQUAL:
        jj_consume_token(LESSEREQUAL);
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        break;
      case LESSER:
        jj_consume_token(LESSER);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                        //System.out.println("\nErro Relacao");
                        nextTokenErr.add("+");
                        nextTokenErr.add("-");
                        nextTokenErr.add("<ID>");
                        nextTokenErr.add("numero_int");
                        nextTokenErr.add("numero_real");
                        nextTokenErr.add(")");
                        nextTokenErr.add("then");
                        expectedToken.add("=, >=, <=, <>, > ou <");
                        errorRecovery();
    }
  }

  final public void expressao() throws ParseException {
    try {
      termo();
      outros_termos();
    } catch (ParseException e) {
                //System.out.println("\nErro Expressao");
                nextTokenErr.add("=");
                nextTokenErr.add("<>");
                nextTokenErr.add(">=");
                nextTokenErr.add("<=");
                nextTokenErr.add(">");
                nextTokenErr.add("<");
                nextTokenErr.add("to");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                nextTokenErr.add("*");
                nextTokenErr.add("/");

                expectedToken.add("+ ou -");
                errorRecovery();
    }
  }

  final public void op_un() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void outros_termos() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        op_ad();
        termo();
        outros_termos();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Outros_Termos");
                nextTokenErr.add("+");
                nextTokenErr.add("-");
                nextTokenErr.add("<ID>");
                nextTokenErr.add("numero_int");
                nextTokenErr.add("numero_real");
                nextTokenErr.add("=");
                nextTokenErr.add("<>");
                nextTokenErr.add(">=");
                nextTokenErr.add("<=");
                nextTokenErr.add(">");
                nextTokenErr.add("<");
                nextTokenErr.add("to");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                expectedToken.add("+, -, ident, numero int ou numero real");
                errorRecovery();
    }
  }

  final public void op_ad() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Op_Ad");
                nextTokenErr.add("+");
                nextTokenErr.add("-");
                nextTokenErr.add("<ID>");
                nextTokenErr.add("numero_int");
                nextTokenErr.add("numero_real");
                nextTokenErr.add("=");
                nextTokenErr.add("<>");
                nextTokenErr.add(">=");
                nextTokenErr.add("<=");
                nextTokenErr.add(">");
                nextTokenErr.add("<");
                nextTokenErr.add("to");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                expectedToken.add("+ ou -");
                errorRecovery();
    }
  }

  final public void termo() throws ParseException {
    try {
      op_un();
      fator();
      mais_fatores();
    } catch (ParseException e) {
                //System.out.println("\nErro Termo");
                nextTokenErr.add("+");
                nextTokenErr.add("-");
                nextTokenErr.add("=");
                nextTokenErr.add("<>");
                nextTokenErr.add(">=");
                nextTokenErr.add("<=");
                nextTokenErr.add(">");
                nextTokenErr.add("<");
                nextTokenErr.add("to");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                expectedToken.add("+, -, <ID>, (, )");
                errorRecovery();
    }
  }

  final public void mais_fatores() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        op_mul();
        fator();
        mais_fatores();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Termo");
                nextTokenErr.add("+");
                nextTokenErr.add("-");
                nextTokenErr.add("=");
                nextTokenErr.add("<>");
                nextTokenErr.add(">=");
                nextTokenErr.add("<=");
                nextTokenErr.add(">");
                nextTokenErr.add("<");
                nextTokenErr.add("to");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                expectedToken.add("*, /, <ID>, (, )");
                errorRecovery();
    }
  }

  final public void op_mul() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Termo");
                nextTokenErr.add("<ID>");
                nextTokenErr.add("numero_int");
                nextTokenErr.add("numero_real");
                nextTokenErr.add("+");
                nextTokenErr.add("-");
                nextTokenErr.add("=");
                nextTokenErr.add("<>");
                nextTokenErr.add(">=");
                nextTokenErr.add("<=");
                nextTokenErr.add(">");
                nextTokenErr.add("<");
                nextTokenErr.add("to");
                nextTokenErr.add(")");
                nextTokenErr.add("then");
                nextTokenErr.add(";");
                nextTokenErr.add("else");

                expectedToken.add("* ou /");
                errorRecovery();
    }
  }

  final public void fator() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case NUM_INT:
      case NUM_REAL:
        numero();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expressao();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                        //System.out.println("\nErro Numero");
                        nextTokenErr.add("+");//Follow
                        nextTokenErr.add("-");
                        nextTokenErr.add("=");
                        nextTokenErr.add("<>");
                        nextTokenErr.add(">=");
                        nextTokenErr.add("<=");
                        nextTokenErr.add(">");
                        nextTokenErr.add("<");
                        nextTokenErr.add("to");
                        nextTokenErr.add(")");
                        nextTokenErr.add("then");
                        nextTokenErr.add(";");
                        nextTokenErr.add("else");
                        nextTokenErr.add("*");
                        nextTokenErr.add("/");

                        expectedToken.add("<ID>, ( ou )");
                        errorRecovery();
    }
  }

  final public void numero() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM_INT:
        jj_consume_token(NUM_INT);
        break;
      case NUM_REAL:
        jj_consume_token(NUM_REAL);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                //System.out.println("\nErro Numero");
                nextTokenErr.add(";");//Follow
                expectedToken.add("<NUM_INT> ou <NUM_REAL>");
                errorRecovery();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_3()) {
    jj_scanpos = xsp;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(WRITE)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LALGTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffdffe0,0xfffdffe0,0x800,0x400,0x3000,0x80,0x4000,0x20,0x200000,0x20,0x200000,0xb2c08000,0xb2c08000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800c0020,0xc0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7ff,0x7ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x7e0,0x3,0x3,0x3,0x3,0xc,0xc,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LALG(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LALG(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LALGTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LALG(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LALGTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LALG(LALGTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LALGTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
